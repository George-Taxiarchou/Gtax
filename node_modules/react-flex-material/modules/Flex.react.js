'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Flex = require('./Flex.scss');

var _Flex2 = _interopRequireDefault(_Flex);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var responsiveModifiers = ['', 'Xs', 'GtXs', 'Sm', 'GtSm', 'Md', 'GtMd', 'Lg', 'GtLg'];

var baseAttributes = ['layout', 'flex', 'order', 'offset', 'align', 'hide', 'show'];

var otherFlexAttributes = ['layoutWrap', 'layoutNoWrap', 'layoutFill', 'layoutMargin', 'layoutPadding'];

/**
 *
 * {
 *   layout: ['layout', 'layoutSm', ... , 'layoutGtLg'],
 *   flex: ['flex', 'flexSm', ... , 'flexGtLg'],
 *   ...
 * }
 *
 * @type {Object}
 */
var responsiveAttributes = baseAttributes.reduce(function (result, attrName) {
  result[attrName] = responsiveModifiers.map(function (val) {
    return attrName + val;
  });
  return result;
}, {});

/**
 * Creates an array out of object values.
 * If values are arrays, they will be flattened.
 *
 * @param {Object} obj
 * @return {Array}
 */
var objectValuesToArray = function objectValuesToArray(obj) {
  return [].concat.apply([], Object.keys(obj).map(function (key) {
    return obj[key];
  }));
};

/**
 * Creates new object out of provided
 * object without particular props
 *
 * @param {Object} obj
 * @param {Array} props - properties to exclude
 * @return {Object}
 */
var omit = function omit(obj, props) {
  return Object.keys(obj).reduce(function (result, key) {
    if (props.indexOf(key) === -1) {
      result[key] = obj[key];
    }
    return result;
  }, {});
};

/**
 * Converts camelCased string to snake-cased string.
 *
 * Example: camelCaseToSnakeCase('helloWorld') // => 'hello-world'
 *
 * @param {String} value
 * @returns {String}
 */
var camelCaseToSnakeCase = function camelCaseToSnakeCase(value) {
  return value.replace(/(?:[A-Z]+|[0-9]+)/g, function (match, index) {
    return index === 0 ? match : '-' + match;
  }).toLowerCase();
};

/**
 * Capitalizes a given string
 *
 * Example: capitalize('hello') // => 'Hello'
 *
 * @param {String} value
 * @returns {String}
 */
var capitalize = function capitalize(value) {
  return value.charAt(0).toUpperCase() + value.slice(1);
};

/**
 * Converts attribute's key/value pair
 * to css class name.
 *
 * Example: attributeToClass('layoutGtMd', 'row') // => 'layout-gt-md-row'
 * Example2: attributeToClass('alignGtMd', 'start start', 'layout') // => 'layout-align-gt-md-start-start'
 *
 * @param {String} attrName
 * @param {String} attrValue
 * @param {String=} prefix
 */
var attributeToClass = function attributeToClass(attrName, attrValue) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  var normalizedAttrValue = typeof attrValue === 'boolean' && attrValue ? '' : attrValue;
  var snakeCasedAttrValue = normalizedAttrValue.replace(' ', '-');
  var className = prefix + capitalize(attrName) + capitalize(snakeCasedAttrValue);
  return camelCaseToSnakeCase(className);
};

/**
 * Maps attributes to real component's css classes.
 *
 * Example:
 * attributesToClasses(['layoutGtMdRow'], props) // => ['Flex__layout-gt-md-row__8hgt2']
 *
 * @param {String[]} attributes
 * @param {Object} props - Component's props
 * @param {String=} prefix
 * @returns {*}
 */
var attributesToClasses = function attributesToClasses(attributes, props) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  return attributes.filter(function (attrName) {
    return attrName in props;
  }).map(function (attrName) {
    return _Flex2.default[attributeToClass(attrName, props[attrName], prefix)];
  });
};

var allFlexAttributes = objectValuesToArray(responsiveAttributes).concat(otherFlexAttributes, ['divider', 'wrap', 'tag']);

var Flex = function (_Component) {
  _inherits(Flex, _Component);

  function Flex() {
    _classCallCheck(this, Flex);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Flex.prototype.render = function render() {
    var _props = this.props,
        className = _props.className,
        tag = _props.tag,
        rest = _objectWithoutProperties(_props, ['className', 'tag']);

    // TODO how could we refactor this?

    var layoutClasses = attributesToClasses(responsiveAttributes.layout, this.props);
    var flexClasses = attributesToClasses(responsiveAttributes.flex, this.props);
    var orderClasses = attributesToClasses(responsiveAttributes.order, this.props, 'flex');
    var offsetClasses = attributesToClasses(responsiveAttributes.offset, this.props, 'flex');
    var alignmentClasses = attributesToClasses(responsiveAttributes.align, this.props, 'layout');
    var hideClasses = attributesToClasses(responsiveAttributes.hide, this.props);
    var showClasses = attributesToClasses(responsiveAttributes.show, this.props);
    var dividerClass = this.props.divider ? [_Flex2.default.divider] : [];
    var otherFlexClasses = attributesToClasses(otherFlexAttributes, this.props);
    var classNames = (className || '').split(' ');

    var classes = layoutClasses.concat(flexClasses, orderClasses, offsetClasses, alignmentClasses).concat(showClasses, hideClasses, dividerClass, classNames, otherFlexClasses).join(' ');

    var FlexComponent = tag || 'div';

    // remove Unknown Prop Warning for > react-5.2 https://facebook.github.io/react/warnings/unknown-prop.html
    var cleanProps = omit(rest, allFlexAttributes);

    return _react2.default.createElement(FlexComponent, _extends({ className: classes }, cleanProps));
  };
  // TODO generate propTypes for attributes

  return Flex;
}(_react.Component);

Flex.propTypes = {
  divider: _propTypes2.default.bool,
  wrap: _propTypes2.default.bool,
  /** Custom class name */
  className: _propTypes2.default.string,
  tag: _propTypes2.default.node,
  children: _propTypes2.default.node
};
exports.default = Flex;
module.exports = exports['default'];